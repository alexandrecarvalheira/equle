/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export type EncryptedInputStruct = {
  ctHash: BigNumberish;
  securityZone: BigNumberish;
  utype: BigNumberish;
  signature: BytesLike;
};

export type EncryptedInputStructOutput = [
  ctHash: bigint,
  securityZone: bigint,
  utype: bigint,
  signature: string
] & { ctHash: bigint; securityZone: bigint; utype: bigint; signature: string };

export interface ITaskManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "allow"
      | "allowGlobal"
      | "allowTransient"
      | "createDecryptTask"
      | "createTask"
      | "getDecryptResult"
      | "getDecryptResultSafe"
      | "isAllowed"
      | "verifyInput"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "allow",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "allowGlobal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "allowTransient",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createDecryptTask",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createTask",
    values: [BigNumberish, BigNumberish, BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getDecryptResult",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDecryptResultSafe",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isAllowed",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyInput",
    values: [EncryptedInputStruct, AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "allow", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "allowGlobal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowTransient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createDecryptTask",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createTask", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDecryptResult",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDecryptResultSafe",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isAllowed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "verifyInput",
    data: BytesLike
  ): Result;
}

export interface ITaskManager extends BaseContract {
  connect(runner?: ContractRunner | null): ITaskManager;
  waitForDeployment(): Promise<this>;

  interface: ITaskManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  allow: TypedContractMethod<
    [ctHash: BigNumberish, account: AddressLike],
    [void],
    "nonpayable"
  >;

  allowGlobal: TypedContractMethod<
    [ctHash: BigNumberish],
    [void],
    "nonpayable"
  >;

  allowTransient: TypedContractMethod<
    [ctHash: BigNumberish, account: AddressLike],
    [void],
    "nonpayable"
  >;

  createDecryptTask: TypedContractMethod<
    [ctHash: BigNumberish, requestor: AddressLike],
    [void],
    "nonpayable"
  >;

  createTask: TypedContractMethod<
    [
      returnType: BigNumberish,
      funcId: BigNumberish,
      encryptedInputs: BigNumberish[],
      extraInputs: BigNumberish[]
    ],
    [bigint],
    "nonpayable"
  >;

  getDecryptResult: TypedContractMethod<
    [ctHash: BigNumberish],
    [bigint],
    "view"
  >;

  getDecryptResultSafe: TypedContractMethod<
    [ctHash: BigNumberish],
    [[bigint, boolean]],
    "view"
  >;

  isAllowed: TypedContractMethod<
    [ctHash: BigNumberish, account: AddressLike],
    [boolean],
    "nonpayable"
  >;

  verifyInput: TypedContractMethod<
    [input: EncryptedInputStruct, sender: AddressLike],
    [bigint],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "allow"
  ): TypedContractMethod<
    [ctHash: BigNumberish, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "allowGlobal"
  ): TypedContractMethod<[ctHash: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "allowTransient"
  ): TypedContractMethod<
    [ctHash: BigNumberish, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createDecryptTask"
  ): TypedContractMethod<
    [ctHash: BigNumberish, requestor: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createTask"
  ): TypedContractMethod<
    [
      returnType: BigNumberish,
      funcId: BigNumberish,
      encryptedInputs: BigNumberish[],
      extraInputs: BigNumberish[]
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getDecryptResult"
  ): TypedContractMethod<[ctHash: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getDecryptResultSafe"
  ): TypedContractMethod<[ctHash: BigNumberish], [[bigint, boolean]], "view">;
  getFunction(
    nameOrSignature: "isAllowed"
  ): TypedContractMethod<
    [ctHash: BigNumberish, account: AddressLike],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "verifyInput"
  ): TypedContractMethod<
    [input: EncryptedInputStruct, sender: AddressLike],
    [bigint],
    "nonpayable"
  >;

  filters: {};
}
