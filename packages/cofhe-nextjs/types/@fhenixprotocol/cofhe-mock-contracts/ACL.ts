/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export type PermissionStruct = {
  issuer: AddressLike;
  expiration: BigNumberish;
  recipient: AddressLike;
  validatorId: BigNumberish;
  validatorContract: AddressLike;
  sealingKey: BytesLike;
  issuerSignature: BytesLike;
  recipientSignature: BytesLike;
};

export type PermissionStructOutput = [
  issuer: string,
  expiration: bigint,
  recipient: string,
  validatorId: bigint,
  validatorContract: string,
  sealingKey: string,
  issuerSignature: string,
  recipientSignature: string
] & {
  issuer: string;
  expiration: bigint;
  recipient: string;
  validatorId: bigint;
  validatorContract: string;
  sealingKey: string;
  issuerSignature: string;
  recipientSignature: string;
};

export interface ACLInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "TASK_MANAGER_ADDRESS_"
      | "acceptOwnership"
      | "allow"
      | "allowForDecryption"
      | "allowGlobal"
      | "allowTransient"
      | "allowedOnBehalf"
      | "allowedTransient"
      | "cleanTransientStorage"
      | "delegateAccount"
      | "eip712Domain"
      | "exists"
      | "getTaskManagerAddress"
      | "getVersion"
      | "globalAllowed"
      | "hashTypedDataV4"
      | "isAllowed"
      | "isAllowedForDecryption"
      | "isAllowedWithPermission"
      | "owner"
      | "pendingOwner"
      | "persistAllowed"
      | "renounceOwnership"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AllowedForDecryption"
      | "EIP712DomainChanged"
      | "NewDelegation"
      | "OwnershipTransferStarted"
      | "OwnershipTransferred"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "TASK_MANAGER_ADDRESS_",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allow",
    values: [BigNumberish, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "allowForDecryption",
    values: [BigNumberish[], AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "allowGlobal",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "allowTransient",
    values: [BigNumberish, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "allowedOnBehalf",
    values: [AddressLike, BigNumberish, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "allowedTransient",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "cleanTransientStorage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "delegateAccount",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "eip712Domain",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "exists", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getTaskManagerAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "globalAllowed",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hashTypedDataV4",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isAllowed",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isAllowedForDecryption",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isAllowedWithPermission",
    values: [PermissionStruct, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "persistAllowed",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "TASK_MANAGER_ADDRESS_",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allow", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "allowForDecryption",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowGlobal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowTransient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowedOnBehalf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowedTransient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cleanTransientStorage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delegateAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "eip712Domain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "exists", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTaskManagerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getVersion", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "globalAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hashTypedDataV4",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isAllowed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isAllowedForDecryption",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAllowedWithPermission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "persistAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace AllowedForDecryptionEvent {
  export type InputTuple = [handlesList: BigNumberish[]];
  export type OutputTuple = [handlesList: bigint[]];
  export interface OutputObject {
    handlesList: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EIP712DomainChangedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewDelegationEvent {
  export type InputTuple = [
    sender: AddressLike,
    delegatee: AddressLike,
    contractAddress: AddressLike
  ];
  export type OutputTuple = [
    sender: string,
    delegatee: string,
    contractAddress: string
  ];
  export interface OutputObject {
    sender: string;
    delegatee: string;
    contractAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferStartedEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ACL extends BaseContract {
  connect(runner?: ContractRunner | null): ACL;
  waitForDeployment(): Promise<this>;

  interface: ACLInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  TASK_MANAGER_ADDRESS_: TypedContractMethod<[], [string], "view">;

  acceptOwnership: TypedContractMethod<[], [void], "nonpayable">;

  allow: TypedContractMethod<
    [handle: BigNumberish, account: AddressLike, requester: AddressLike],
    [void],
    "nonpayable"
  >;

  allowForDecryption: TypedContractMethod<
    [handlesList: BigNumberish[], requester: AddressLike],
    [void],
    "nonpayable"
  >;

  allowGlobal: TypedContractMethod<
    [handle: BigNumberish, requester: AddressLike],
    [void],
    "nonpayable"
  >;

  allowTransient: TypedContractMethod<
    [handle: BigNumberish, account: AddressLike, requester: AddressLike],
    [void],
    "nonpayable"
  >;

  allowedOnBehalf: TypedContractMethod<
    [
      delegatee: AddressLike,
      handle: BigNumberish,
      contractAddress: AddressLike,
      account: AddressLike
    ],
    [boolean],
    "view"
  >;

  allowedTransient: TypedContractMethod<
    [handle: BigNumberish, account: AddressLike],
    [boolean],
    "view"
  >;

  cleanTransientStorage: TypedContractMethod<[], [void], "nonpayable">;

  delegateAccount: TypedContractMethod<
    [delegatee: AddressLike, delegateeContract: AddressLike],
    [void],
    "nonpayable"
  >;

  eip712Domain: TypedContractMethod<
    [],
    [
      [string, string, string, bigint, string, string, bigint[]] & {
        fields: string;
        name: string;
        version: string;
        chainId: bigint;
        verifyingContract: string;
        salt: string;
        extensions: bigint[];
      }
    ],
    "view"
  >;

  exists: TypedContractMethod<[], [boolean], "view">;

  getTaskManagerAddress: TypedContractMethod<[], [string], "view">;

  getVersion: TypedContractMethod<[], [string], "view">;

  globalAllowed: TypedContractMethod<[handle: BigNumberish], [boolean], "view">;

  hashTypedDataV4: TypedContractMethod<
    [structHash: BytesLike],
    [string],
    "view"
  >;

  isAllowed: TypedContractMethod<
    [handle: BigNumberish, account: AddressLike],
    [boolean],
    "view"
  >;

  isAllowedForDecryption: TypedContractMethod<
    [handle: BigNumberish],
    [boolean],
    "view"
  >;

  isAllowedWithPermission: TypedContractMethod<
    [permission: PermissionStruct, handle: BigNumberish],
    [boolean],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  pendingOwner: TypedContractMethod<[], [string], "view">;

  persistAllowed: TypedContractMethod<
    [handle: BigNumberish, account: AddressLike],
    [boolean],
    "view"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "TASK_MANAGER_ADDRESS_"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "acceptOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "allow"
  ): TypedContractMethod<
    [handle: BigNumberish, account: AddressLike, requester: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "allowForDecryption"
  ): TypedContractMethod<
    [handlesList: BigNumberish[], requester: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "allowGlobal"
  ): TypedContractMethod<
    [handle: BigNumberish, requester: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "allowTransient"
  ): TypedContractMethod<
    [handle: BigNumberish, account: AddressLike, requester: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "allowedOnBehalf"
  ): TypedContractMethod<
    [
      delegatee: AddressLike,
      handle: BigNumberish,
      contractAddress: AddressLike,
      account: AddressLike
    ],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "allowedTransient"
  ): TypedContractMethod<
    [handle: BigNumberish, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "cleanTransientStorage"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "delegateAccount"
  ): TypedContractMethod<
    [delegatee: AddressLike, delegateeContract: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "eip712Domain"
  ): TypedContractMethod<
    [],
    [
      [string, string, string, bigint, string, string, bigint[]] & {
        fields: string;
        name: string;
        version: string;
        chainId: bigint;
        verifyingContract: string;
        salt: string;
        extensions: bigint[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "exists"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "getTaskManagerAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getVersion"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "globalAllowed"
  ): TypedContractMethod<[handle: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "hashTypedDataV4"
  ): TypedContractMethod<[structHash: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "isAllowed"
  ): TypedContractMethod<
    [handle: BigNumberish, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isAllowedForDecryption"
  ): TypedContractMethod<[handle: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "isAllowedWithPermission"
  ): TypedContractMethod<
    [permission: PermissionStruct, handle: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pendingOwner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "persistAllowed"
  ): TypedContractMethod<
    [handle: BigNumberish, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "AllowedForDecryption"
  ): TypedContractEvent<
    AllowedForDecryptionEvent.InputTuple,
    AllowedForDecryptionEvent.OutputTuple,
    AllowedForDecryptionEvent.OutputObject
  >;
  getEvent(
    key: "EIP712DomainChanged"
  ): TypedContractEvent<
    EIP712DomainChangedEvent.InputTuple,
    EIP712DomainChangedEvent.OutputTuple,
    EIP712DomainChangedEvent.OutputObject
  >;
  getEvent(
    key: "NewDelegation"
  ): TypedContractEvent<
    NewDelegationEvent.InputTuple,
    NewDelegationEvent.OutputTuple,
    NewDelegationEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferStarted"
  ): TypedContractEvent<
    OwnershipTransferStartedEvent.InputTuple,
    OwnershipTransferStartedEvent.OutputTuple,
    OwnershipTransferStartedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "AllowedForDecryption(uint256[])": TypedContractEvent<
      AllowedForDecryptionEvent.InputTuple,
      AllowedForDecryptionEvent.OutputTuple,
      AllowedForDecryptionEvent.OutputObject
    >;
    AllowedForDecryption: TypedContractEvent<
      AllowedForDecryptionEvent.InputTuple,
      AllowedForDecryptionEvent.OutputTuple,
      AllowedForDecryptionEvent.OutputObject
    >;

    "EIP712DomainChanged()": TypedContractEvent<
      EIP712DomainChangedEvent.InputTuple,
      EIP712DomainChangedEvent.OutputTuple,
      EIP712DomainChangedEvent.OutputObject
    >;
    EIP712DomainChanged: TypedContractEvent<
      EIP712DomainChangedEvent.InputTuple,
      EIP712DomainChangedEvent.OutputTuple,
      EIP712DomainChangedEvent.OutputObject
    >;

    "NewDelegation(address,address,address)": TypedContractEvent<
      NewDelegationEvent.InputTuple,
      NewDelegationEvent.OutputTuple,
      NewDelegationEvent.OutputObject
    >;
    NewDelegation: TypedContractEvent<
      NewDelegationEvent.InputTuple,
      NewDelegationEvent.OutputTuple,
      NewDelegationEvent.OutputObject
    >;

    "OwnershipTransferStarted(address,address)": TypedContractEvent<
      OwnershipTransferStartedEvent.InputTuple,
      OwnershipTransferStartedEvent.OutputTuple,
      OwnershipTransferStartedEvent.OutputObject
    >;
    OwnershipTransferStarted: TypedContractEvent<
      OwnershipTransferStartedEvent.InputTuple,
      OwnershipTransferStartedEvent.OutputTuple,
      OwnershipTransferStartedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
