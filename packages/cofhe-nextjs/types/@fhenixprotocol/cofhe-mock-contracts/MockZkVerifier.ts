/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export type EncryptedInputStruct = {
  ctHash: BigNumberish;
  securityZone: BigNumberish;
  utype: BigNumberish;
  signature: BytesLike;
};

export type EncryptedInputStructOutput = [
  ctHash: bigint,
  securityZone: bigint,
  utype: bigint,
  signature: string
] & { ctHash: bigint; securityZone: bigint; utype: bigint; signature: string };

export interface MockZkVerifierInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "exists"
      | "insertCtHash"
      | "insertPackedCtHashes"
      | "zkVerify"
      | "zkVerifyCalcCtHash"
      | "zkVerifyCalcCtHashesPacked"
      | "zkVerifyPacked"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "exists", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "insertCtHash",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "insertPackedCtHashes",
    values: [BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "zkVerify",
    values: [
      BigNumberish,
      BigNumberish,
      AddressLike,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "zkVerifyCalcCtHash",
    values: [
      BigNumberish,
      BigNumberish,
      AddressLike,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "zkVerifyCalcCtHashesPacked",
    values: [
      BigNumberish[],
      BigNumberish[],
      AddressLike,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "zkVerifyPacked",
    values: [
      BigNumberish[],
      BigNumberish[],
      AddressLike,
      BigNumberish,
      BigNumberish
    ]
  ): string;

  decodeFunctionResult(functionFragment: "exists", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "insertCtHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "insertPackedCtHashes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "zkVerify", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "zkVerifyCalcCtHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "zkVerifyCalcCtHashesPacked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "zkVerifyPacked",
    data: BytesLike
  ): Result;
}

export interface MockZkVerifier extends BaseContract {
  connect(runner?: ContractRunner | null): MockZkVerifier;
  waitForDeployment(): Promise<this>;

  interface: MockZkVerifierInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  exists: TypedContractMethod<[], [boolean], "view">;

  insertCtHash: TypedContractMethod<
    [ctHash: BigNumberish, value: BigNumberish],
    [void],
    "nonpayable"
  >;

  insertPackedCtHashes: TypedContractMethod<
    [ctHashes: BigNumberish[], values: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  zkVerify: TypedContractMethod<
    [
      value: BigNumberish,
      utype: BigNumberish,
      user: AddressLike,
      securityZone: BigNumberish,
      arg4: BigNumberish
    ],
    [EncryptedInputStructOutput],
    "nonpayable"
  >;

  zkVerifyCalcCtHash: TypedContractMethod<
    [
      value: BigNumberish,
      utype: BigNumberish,
      user: AddressLike,
      securityZone: BigNumberish,
      arg4: BigNumberish
    ],
    [bigint],
    "view"
  >;

  zkVerifyCalcCtHashesPacked: TypedContractMethod<
    [
      values: BigNumberish[],
      utypes: BigNumberish[],
      user: AddressLike,
      securityZone: BigNumberish,
      chainId: BigNumberish
    ],
    [bigint[]],
    "view"
  >;

  zkVerifyPacked: TypedContractMethod<
    [
      values: BigNumberish[],
      utypes: BigNumberish[],
      user: AddressLike,
      securityZone: BigNumberish,
      chainId: BigNumberish
    ],
    [EncryptedInputStructOutput[]],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "exists"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "insertCtHash"
  ): TypedContractMethod<
    [ctHash: BigNumberish, value: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "insertPackedCtHashes"
  ): TypedContractMethod<
    [ctHashes: BigNumberish[], values: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "zkVerify"
  ): TypedContractMethod<
    [
      value: BigNumberish,
      utype: BigNumberish,
      user: AddressLike,
      securityZone: BigNumberish,
      arg4: BigNumberish
    ],
    [EncryptedInputStructOutput],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "zkVerifyCalcCtHash"
  ): TypedContractMethod<
    [
      value: BigNumberish,
      utype: BigNumberish,
      user: AddressLike,
      securityZone: BigNumberish,
      arg4: BigNumberish
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "zkVerifyCalcCtHashesPacked"
  ): TypedContractMethod<
    [
      values: BigNumberish[],
      utypes: BigNumberish[],
      user: AddressLike,
      securityZone: BigNumberish,
      chainId: BigNumberish
    ],
    [bigint[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "zkVerifyPacked"
  ): TypedContractMethod<
    [
      values: BigNumberish[],
      utypes: BigNumberish[],
      user: AddressLike,
      securityZone: BigNumberish,
      chainId: BigNumberish
    ],
    [EncryptedInputStructOutput[]],
    "nonpayable"
  >;

  filters: {};
}
