/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export type PermissionStruct = {
  issuer: AddressLike;
  expiration: BigNumberish;
  recipient: AddressLike;
  validatorId: BigNumberish;
  validatorContract: AddressLike;
  sealingKey: BytesLike;
  issuerSignature: BytesLike;
  recipientSignature: BytesLike;
};

export type PermissionStructOutput = [
  issuer: string,
  expiration: bigint,
  recipient: string,
  validatorId: bigint,
  validatorContract: string,
  sealingKey: string,
  issuerSignature: string,
  recipientSignature: string
] & {
  issuer: string;
  expiration: bigint;
  recipient: string;
  validatorId: bigint;
  validatorContract: string;
  sealingKey: string;
  issuerSignature: string;
  recipientSignature: string;
};

export interface MockQueryDecrypterInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "acl"
      | "decodeLowLevelReversion"
      | "exists"
      | "initialize"
      | "mockQueryDecrypt"
      | "queryDecrypt"
      | "querySealOutput"
      | "seal"
      | "taskManager"
      | "unseal"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "acl", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decodeLowLevelReversion",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "exists", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "mockQueryDecrypt",
    values: [BigNumberish, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "queryDecrypt",
    values: [BigNumberish, BigNumberish, PermissionStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "querySealOutput",
    values: [BigNumberish, BigNumberish, PermissionStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "seal",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "taskManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "unseal",
    values: [BytesLike, BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "acl", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decodeLowLevelReversion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "exists", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mockQueryDecrypt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "queryDecrypt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "querySealOutput",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "seal", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "taskManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unseal", data: BytesLike): Result;
}

export interface MockQueryDecrypter extends BaseContract {
  connect(runner?: ContractRunner | null): MockQueryDecrypter;
  waitForDeployment(): Promise<this>;

  interface: MockQueryDecrypterInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  acl: TypedContractMethod<[], [string], "view">;

  decodeLowLevelReversion: TypedContractMethod<
    [data: BytesLike],
    [string],
    "view"
  >;

  exists: TypedContractMethod<[], [boolean], "view">;

  initialize: TypedContractMethod<
    [_taskManager: AddressLike, _acl: AddressLike],
    [void],
    "nonpayable"
  >;

  mockQueryDecrypt: TypedContractMethod<
    [ctHash: BigNumberish, arg1: BigNumberish, issuer: AddressLike],
    [[boolean, string, bigint] & { allowed: boolean; error: string }],
    "view"
  >;

  queryDecrypt: TypedContractMethod<
    [ctHash: BigNumberish, arg1: BigNumberish, permission: PermissionStruct],
    [[boolean, string, bigint] & { allowed: boolean; error: string }],
    "view"
  >;

  querySealOutput: TypedContractMethod<
    [ctHash: BigNumberish, arg1: BigNumberish, permission: PermissionStruct],
    [[boolean, string, string] & { allowed: boolean; error: string }],
    "view"
  >;

  seal: TypedContractMethod<
    [input: BigNumberish, key: BytesLike],
    [string],
    "view"
  >;

  taskManager: TypedContractMethod<[], [string], "view">;

  unseal: TypedContractMethod<
    [hashed: BytesLike, key: BytesLike],
    [bigint],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "acl"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "decodeLowLevelReversion"
  ): TypedContractMethod<[data: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "exists"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [_taskManager: AddressLike, _acl: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "mockQueryDecrypt"
  ): TypedContractMethod<
    [ctHash: BigNumberish, arg1: BigNumberish, issuer: AddressLike],
    [[boolean, string, bigint] & { allowed: boolean; error: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "queryDecrypt"
  ): TypedContractMethod<
    [ctHash: BigNumberish, arg1: BigNumberish, permission: PermissionStruct],
    [[boolean, string, bigint] & { allowed: boolean; error: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "querySealOutput"
  ): TypedContractMethod<
    [ctHash: BigNumberish, arg1: BigNumberish, permission: PermissionStruct],
    [[boolean, string, string] & { allowed: boolean; error: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "seal"
  ): TypedContractMethod<
    [input: BigNumberish, key: BytesLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "taskManager"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "unseal"
  ): TypedContractMethod<[hashed: BytesLike, key: BytesLike], [bigint], "view">;

  filters: {};
}
