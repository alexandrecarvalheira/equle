/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export type PermissionStruct = {
  issuer: AddressLike;
  expiration: BigNumberish;
  recipient: AddressLike;
  validatorId: BigNumberish;
  validatorContract: AddressLike;
  sealingKey: BytesLike;
  issuerSignature: BytesLike;
  recipientSignature: BytesLike;
};

export type PermissionStructOutput = [
  issuer: string,
  expiration: bigint,
  recipient: string,
  validatorId: bigint,
  validatorContract: string,
  sealingKey: string,
  issuerSignature: string,
  recipientSignature: string
] & {
  issuer: string;
  expiration: bigint;
  recipient: string;
  validatorId: bigint;
  validatorContract: string;
  sealingKey: string;
  issuerSignature: string;
  recipientSignature: string;
};

export type EncryptedInputStruct = {
  ctHash: BigNumberish;
  securityZone: BigNumberish;
  utype: BigNumberish;
  signature: BytesLike;
};

export type EncryptedInputStructOutput = [
  ctHash: bigint,
  securityZone: bigint,
  utype: bigint,
  signature: string
] & { ctHash: bigint; securityZone: bigint; utype: bigint; signature: string };

export interface TaskManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "MOCK_logAllow"
      | "MOCK_setInEuintKey"
      | "acl"
      | "aggregator"
      | "allow"
      | "allowForDecryption"
      | "allowGlobal"
      | "allowTransient"
      | "createDecryptTask"
      | "createTask"
      | "exists"
      | "getDecryptResult"
      | "getDecryptResultSafe"
      | "handleDecryptResult"
      | "handleError"
      | "inMockStorage"
      | "initialize"
      | "isAllowed"
      | "isAllowedWithPermission"
      | "isInitialized"
      | "logOps"
      | "mockStorage"
      | "removeFirstLetter"
      | "setACLContract"
      | "setAggregator"
      | "setLogOps"
      | "setSecurityZoneMax"
      | "setSecurityZoneMin"
      | "setSecurityZones"
      | "setVerifierSigner"
      | "sliceString"
      | "verifyInput"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "DecryptionResult"
      | "ProtocolNotification"
      | "TaskCreated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "MOCK_logAllow",
    values: [string, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "MOCK_setInEuintKey",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "acl", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "aggregator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allow",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "allowForDecryption",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "allowGlobal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "allowTransient",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createDecryptTask",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createTask",
    values: [BigNumberish, BigNumberish, BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "exists", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getDecryptResult",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDecryptResultSafe",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "handleDecryptResult",
    values: [BigNumberish, BigNumberish, AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "handleError",
    values: [BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "inMockStorage",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isAllowed",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isAllowedWithPermission",
    values: [PermissionStruct, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isInitialized",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "logOps", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "mockStorage",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeFirstLetter",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setACLContract",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setAggregator",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "setLogOps", values: [boolean]): string;
  encodeFunctionData(
    functionFragment: "setSecurityZoneMax",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setSecurityZoneMin",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setSecurityZones",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setVerifierSigner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "sliceString",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyInput",
    values: [EncryptedInputStruct, AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "MOCK_logAllow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MOCK_setInEuintKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "acl", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "aggregator", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "allow", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "allowForDecryption",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowGlobal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowTransient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createDecryptTask",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createTask", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "exists", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDecryptResult",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDecryptResultSafe",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "handleDecryptResult",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "handleError",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "inMockStorage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isAllowed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isAllowedWithPermission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isInitialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "logOps", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mockStorage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeFirstLetter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setACLContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAggregator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setLogOps", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setSecurityZoneMax",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSecurityZoneMin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSecurityZones",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVerifierSigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sliceString",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyInput",
    data: BytesLike
  ): Result;
}

export namespace DecryptionResultEvent {
  export type InputTuple = [
    ctHash: BigNumberish,
    result: BigNumberish,
    requestor: AddressLike
  ];
  export type OutputTuple = [ctHash: bigint, result: bigint, requestor: string];
  export interface OutputObject {
    ctHash: bigint;
    result: bigint;
    requestor: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProtocolNotificationEvent {
  export type InputTuple = [
    ctHash: BigNumberish,
    operation: string,
    errorMessage: string
  ];
  export type OutputTuple = [
    ctHash: bigint,
    operation: string,
    errorMessage: string
  ];
  export interface OutputObject {
    ctHash: bigint;
    operation: string;
    errorMessage: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TaskCreatedEvent {
  export type InputTuple = [
    ctHash: BigNumberish,
    operation: string,
    input1: BigNumberish,
    input2: BigNumberish,
    input3: BigNumberish
  ];
  export type OutputTuple = [
    ctHash: bigint,
    operation: string,
    input1: bigint,
    input2: bigint,
    input3: bigint
  ];
  export interface OutputObject {
    ctHash: bigint;
    operation: string;
    input1: bigint;
    input2: bigint;
    input3: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface TaskManager extends BaseContract {
  connect(runner?: ContractRunner | null): TaskManager;
  waitForDeployment(): Promise<this>;

  interface: TaskManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  MOCK_logAllow: TypedContractMethod<
    [operation: string, ctHash: BigNumberish, account: AddressLike],
    [void],
    "view"
  >;

  MOCK_setInEuintKey: TypedContractMethod<
    [ctHash: BigNumberish, value: BigNumberish],
    [void],
    "nonpayable"
  >;

  acl: TypedContractMethod<[], [string], "view">;

  aggregator: TypedContractMethod<[], [string], "view">;

  allow: TypedContractMethod<
    [ctHash: BigNumberish, account: AddressLike],
    [void],
    "nonpayable"
  >;

  allowForDecryption: TypedContractMethod<
    [ctHash: BigNumberish],
    [void],
    "nonpayable"
  >;

  allowGlobal: TypedContractMethod<
    [ctHash: BigNumberish],
    [void],
    "nonpayable"
  >;

  allowTransient: TypedContractMethod<
    [ctHash: BigNumberish, account: AddressLike],
    [void],
    "nonpayable"
  >;

  createDecryptTask: TypedContractMethod<
    [ctHash: BigNumberish, arg1: AddressLike],
    [void],
    "nonpayable"
  >;

  createTask: TypedContractMethod<
    [
      returnType: BigNumberish,
      funcId: BigNumberish,
      encryptedHashes: BigNumberish[],
      extraInputs: BigNumberish[]
    ],
    [bigint],
    "nonpayable"
  >;

  exists: TypedContractMethod<[], [boolean], "view">;

  getDecryptResult: TypedContractMethod<
    [ctHash: BigNumberish],
    [bigint],
    "view"
  >;

  getDecryptResultSafe: TypedContractMethod<
    [ctHash: BigNumberish],
    [[bigint, boolean] & { result: bigint; decrypted: boolean }],
    "view"
  >;

  handleDecryptResult: TypedContractMethod<
    [ctHash: BigNumberish, result: BigNumberish, arg2: AddressLike[]],
    [void],
    "nonpayable"
  >;

  handleError: TypedContractMethod<
    [ctHash: BigNumberish, operation: string, errorMessage: string],
    [void],
    "nonpayable"
  >;

  inMockStorage: TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;

  initialize: TypedContractMethod<
    [initialOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  isAllowed: TypedContractMethod<
    [ctHash: BigNumberish, account: AddressLike],
    [boolean],
    "view"
  >;

  isAllowedWithPermission: TypedContractMethod<
    [permission: PermissionStruct, handle: BigNumberish],
    [boolean],
    "view"
  >;

  isInitialized: TypedContractMethod<[], [boolean], "view">;

  logOps: TypedContractMethod<[], [boolean], "view">;

  mockStorage: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  removeFirstLetter: TypedContractMethod<[str: string], [string], "view">;

  setACLContract: TypedContractMethod<
    [_aclAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  setAggregator: TypedContractMethod<
    [_aggregatorAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  setLogOps: TypedContractMethod<[_logOps: boolean], [void], "nonpayable">;

  setSecurityZoneMax: TypedContractMethod<
    [securityZone: BigNumberish],
    [void],
    "nonpayable"
  >;

  setSecurityZoneMin: TypedContractMethod<
    [securityZone: BigNumberish],
    [void],
    "nonpayable"
  >;

  setSecurityZones: TypedContractMethod<
    [minSZ: BigNumberish, maxSZ: BigNumberish],
    [void],
    "nonpayable"
  >;

  setVerifierSigner: TypedContractMethod<
    [signer: AddressLike],
    [void],
    "nonpayable"
  >;

  sliceString: TypedContractMethod<
    [str: string, start: BigNumberish, length: BigNumberish],
    [string],
    "view"
  >;

  verifyInput: TypedContractMethod<
    [input: EncryptedInputStruct, sender: AddressLike],
    [bigint],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "MOCK_logAllow"
  ): TypedContractMethod<
    [operation: string, ctHash: BigNumberish, account: AddressLike],
    [void],
    "view"
  >;
  getFunction(
    nameOrSignature: "MOCK_setInEuintKey"
  ): TypedContractMethod<
    [ctHash: BigNumberish, value: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "acl"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "aggregator"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "allow"
  ): TypedContractMethod<
    [ctHash: BigNumberish, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "allowForDecryption"
  ): TypedContractMethod<[ctHash: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "allowGlobal"
  ): TypedContractMethod<[ctHash: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "allowTransient"
  ): TypedContractMethod<
    [ctHash: BigNumberish, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createDecryptTask"
  ): TypedContractMethod<
    [ctHash: BigNumberish, arg1: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createTask"
  ): TypedContractMethod<
    [
      returnType: BigNumberish,
      funcId: BigNumberish,
      encryptedHashes: BigNumberish[],
      extraInputs: BigNumberish[]
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "exists"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "getDecryptResult"
  ): TypedContractMethod<[ctHash: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getDecryptResultSafe"
  ): TypedContractMethod<
    [ctHash: BigNumberish],
    [[bigint, boolean] & { result: bigint; decrypted: boolean }],
    "view"
  >;
  getFunction(
    nameOrSignature: "handleDecryptResult"
  ): TypedContractMethod<
    [ctHash: BigNumberish, result: BigNumberish, arg2: AddressLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "handleError"
  ): TypedContractMethod<
    [ctHash: BigNumberish, operation: string, errorMessage: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "inMockStorage"
  ): TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<[initialOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "isAllowed"
  ): TypedContractMethod<
    [ctHash: BigNumberish, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isAllowedWithPermission"
  ): TypedContractMethod<
    [permission: PermissionStruct, handle: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isInitialized"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "logOps"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "mockStorage"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "removeFirstLetter"
  ): TypedContractMethod<[str: string], [string], "view">;
  getFunction(
    nameOrSignature: "setACLContract"
  ): TypedContractMethod<[_aclAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setAggregator"
  ): TypedContractMethod<
    [_aggregatorAddress: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setLogOps"
  ): TypedContractMethod<[_logOps: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setSecurityZoneMax"
  ): TypedContractMethod<[securityZone: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setSecurityZoneMin"
  ): TypedContractMethod<[securityZone: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setSecurityZones"
  ): TypedContractMethod<
    [minSZ: BigNumberish, maxSZ: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setVerifierSigner"
  ): TypedContractMethod<[signer: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "sliceString"
  ): TypedContractMethod<
    [str: string, start: BigNumberish, length: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "verifyInput"
  ): TypedContractMethod<
    [input: EncryptedInputStruct, sender: AddressLike],
    [bigint],
    "nonpayable"
  >;

  getEvent(
    key: "DecryptionResult"
  ): TypedContractEvent<
    DecryptionResultEvent.InputTuple,
    DecryptionResultEvent.OutputTuple,
    DecryptionResultEvent.OutputObject
  >;
  getEvent(
    key: "ProtocolNotification"
  ): TypedContractEvent<
    ProtocolNotificationEvent.InputTuple,
    ProtocolNotificationEvent.OutputTuple,
    ProtocolNotificationEvent.OutputObject
  >;
  getEvent(
    key: "TaskCreated"
  ): TypedContractEvent<
    TaskCreatedEvent.InputTuple,
    TaskCreatedEvent.OutputTuple,
    TaskCreatedEvent.OutputObject
  >;

  filters: {
    "DecryptionResult(uint256,uint256,address)": TypedContractEvent<
      DecryptionResultEvent.InputTuple,
      DecryptionResultEvent.OutputTuple,
      DecryptionResultEvent.OutputObject
    >;
    DecryptionResult: TypedContractEvent<
      DecryptionResultEvent.InputTuple,
      DecryptionResultEvent.OutputTuple,
      DecryptionResultEvent.OutputObject
    >;

    "ProtocolNotification(uint256,string,string)": TypedContractEvent<
      ProtocolNotificationEvent.InputTuple,
      ProtocolNotificationEvent.OutputTuple,
      ProtocolNotificationEvent.OutputObject
    >;
    ProtocolNotification: TypedContractEvent<
      ProtocolNotificationEvent.InputTuple,
      ProtocolNotificationEvent.OutputTuple,
      ProtocolNotificationEvent.OutputObject
    >;

    "TaskCreated(uint256,string,uint256,uint256,uint256)": TypedContractEvent<
      TaskCreatedEvent.InputTuple,
      TaskCreatedEvent.OutputTuple,
      TaskCreatedEvent.OutputObject
    >;
    TaskCreated: TypedContractEvent<
      TaskCreatedEvent.InputTuple,
      TaskCreatedEvent.OutputTuple,
      TaskCreatedEvent.OutputObject
    >;
  };
}
