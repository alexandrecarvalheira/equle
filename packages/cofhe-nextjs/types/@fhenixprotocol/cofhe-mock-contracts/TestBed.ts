/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export type InEuint32Struct = {
  ctHash: BigNumberish;
  securityZone: BigNumberish;
  utype: BigNumberish;
  signature: BytesLike;
};

export type InEuint32StructOutput = [
  ctHash: bigint,
  securityZone: bigint,
  utype: bigint,
  signature: string
] & { ctHash: bigint; securityZone: bigint; utype: bigint; signature: string };

export interface TestBedInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "add"
      | "decrypt"
      | "eNumber"
      | "exists"
      | "getDecryptResult"
      | "getDecryptResultSafe"
      | "increment"
      | "mul"
      | "numberHash"
      | "setNumber"
      | "setNumberTrivial"
      | "sub"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "add",
    values: [InEuint32Struct]
  ): string;
  encodeFunctionData(functionFragment: "decrypt", values?: undefined): string;
  encodeFunctionData(functionFragment: "eNumber", values?: undefined): string;
  encodeFunctionData(functionFragment: "exists", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getDecryptResult",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDecryptResultSafe",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "increment", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "mul",
    values: [InEuint32Struct]
  ): string;
  encodeFunctionData(
    functionFragment: "numberHash",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setNumber",
    values: [InEuint32Struct]
  ): string;
  encodeFunctionData(
    functionFragment: "setNumberTrivial",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sub",
    values: [InEuint32Struct]
  ): string;

  decodeFunctionResult(functionFragment: "add", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decrypt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "eNumber", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "exists", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDecryptResult",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDecryptResultSafe",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "increment", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mul", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "numberHash", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setNumber", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setNumberTrivial",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sub", data: BytesLike): Result;
}

export interface TestBed extends BaseContract {
  connect(runner?: ContractRunner | null): TestBed;
  waitForDeployment(): Promise<this>;

  interface: TestBedInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  add: TypedContractMethod<[inNumber: InEuint32Struct], [void], "nonpayable">;

  decrypt: TypedContractMethod<[], [void], "nonpayable">;

  eNumber: TypedContractMethod<[], [bigint], "view">;

  exists: TypedContractMethod<[], [boolean], "view">;

  getDecryptResult: TypedContractMethod<
    [input1: BigNumberish],
    [bigint],
    "view"
  >;

  getDecryptResultSafe: TypedContractMethod<
    [input1: BigNumberish],
    [[bigint, boolean] & { value: bigint; decrypted: boolean }],
    "view"
  >;

  increment: TypedContractMethod<[], [void], "nonpayable">;

  mul: TypedContractMethod<[inNumber: InEuint32Struct], [void], "nonpayable">;

  numberHash: TypedContractMethod<[], [bigint], "view">;

  setNumber: TypedContractMethod<
    [inNumber: InEuint32Struct],
    [void],
    "nonpayable"
  >;

  setNumberTrivial: TypedContractMethod<
    [inNumber: BigNumberish],
    [void],
    "nonpayable"
  >;

  sub: TypedContractMethod<[inNumber: InEuint32Struct], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "add"
  ): TypedContractMethod<[inNumber: InEuint32Struct], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "decrypt"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "eNumber"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "exists"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "getDecryptResult"
  ): TypedContractMethod<[input1: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getDecryptResultSafe"
  ): TypedContractMethod<
    [input1: BigNumberish],
    [[bigint, boolean] & { value: bigint; decrypted: boolean }],
    "view"
  >;
  getFunction(
    nameOrSignature: "increment"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "mul"
  ): TypedContractMethod<[inNumber: InEuint32Struct], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "numberHash"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "setNumber"
  ): TypedContractMethod<[inNumber: InEuint32Struct], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setNumberTrivial"
  ): TypedContractMethod<[inNumber: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "sub"
  ): TypedContractMethod<[inNumber: InEuint32Struct], [void], "nonpayable">;

  filters: {};
}
