/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface MockCoFHEInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "MOCK_logAllow"
      | "MOCK_setInEuintKey"
      | "inMockStorage"
      | "logOps"
      | "mockStorage"
      | "removeFirstLetter"
      | "setLogOps"
      | "sliceString"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "MOCK_logAllow",
    values: [string, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "MOCK_setInEuintKey",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "inMockStorage",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "logOps", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "mockStorage",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeFirstLetter",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setLogOps", values: [boolean]): string;
  encodeFunctionData(
    functionFragment: "sliceString",
    values: [string, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "MOCK_logAllow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MOCK_setInEuintKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "inMockStorage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "logOps", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mockStorage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeFirstLetter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setLogOps", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sliceString",
    data: BytesLike
  ): Result;
}

export interface MockCoFHE extends BaseContract {
  connect(runner?: ContractRunner | null): MockCoFHE;
  waitForDeployment(): Promise<this>;

  interface: MockCoFHEInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  MOCK_logAllow: TypedContractMethod<
    [operation: string, ctHash: BigNumberish, account: AddressLike],
    [void],
    "view"
  >;

  MOCK_setInEuintKey: TypedContractMethod<
    [ctHash: BigNumberish, value: BigNumberish],
    [void],
    "nonpayable"
  >;

  inMockStorage: TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;

  logOps: TypedContractMethod<[], [boolean], "view">;

  mockStorage: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  removeFirstLetter: TypedContractMethod<[str: string], [string], "view">;

  setLogOps: TypedContractMethod<[_logOps: boolean], [void], "nonpayable">;

  sliceString: TypedContractMethod<
    [str: string, start: BigNumberish, length: BigNumberish],
    [string],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "MOCK_logAllow"
  ): TypedContractMethod<
    [operation: string, ctHash: BigNumberish, account: AddressLike],
    [void],
    "view"
  >;
  getFunction(
    nameOrSignature: "MOCK_setInEuintKey"
  ): TypedContractMethod<
    [ctHash: BigNumberish, value: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "inMockStorage"
  ): TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "logOps"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "mockStorage"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "removeFirstLetter"
  ): TypedContractMethod<[str: string], [string], "view">;
  getFunction(
    nameOrSignature: "setLogOps"
  ): TypedContractMethod<[_logOps: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "sliceString"
  ): TypedContractMethod<
    [str: string, start: BigNumberish, length: BigNumberish],
    [string],
    "view"
  >;

  filters: {};
}
