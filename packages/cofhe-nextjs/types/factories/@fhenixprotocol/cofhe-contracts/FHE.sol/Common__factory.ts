/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../common";
import type {
  Common,
  CommonInterface,
} from "../../../../@fhenixprotocol/cofhe-contracts/FHE.sol/Common";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes1",
        name: "char",
        type: "bytes1",
      },
    ],
    name: "InvalidHexCharacter",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "int32",
        name: "value",
        type: "int32",
      },
    ],
    name: "SecurityZoneOutOfBounds",
    type: "error",
  },
] as const;

const _bytecode =
  "0x6055604b600b8282823980515f1a607314603f577f4e487b71000000000000000000000000000000000000000000000000000000005f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220a59cf481a9a0922c5991171119905da840a0016ab32b924d44b07336b5cf86f064736f6c63430008190033";

type CommonConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CommonConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Common__factory extends ContractFactory {
  constructor(...args: CommonConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      Common & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): Common__factory {
    return super.connect(runner) as Common__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CommonInterface {
    return new Interface(_abi) as CommonInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): Common {
    return new Contract(address, _abi, runner) as unknown as Common;
  }
}
