/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  MockQueryDecrypter,
  MockQueryDecrypterInterface,
} from "../../../@fhenixprotocol/cofhe-mock-contracts/MockQueryDecrypter";

const _abi = [
  {
    inputs: [],
    name: "NotAllowed",
    type: "error",
  },
  {
    inputs: [],
    name: "SealingKeyInvalid",
    type: "error",
  },
  {
    inputs: [],
    name: "SealingKeyMissing",
    type: "error",
  },
  {
    inputs: [],
    name: "acl",
    outputs: [
      {
        internalType: "contract ACL",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "decodeLowLevelReversion",
    outputs: [
      {
        internalType: "string",
        name: "error",
        type: "string",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "exists",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_taskManager",
        type: "address",
      },
      {
        internalType: "address",
        name: "_acl",
        type: "address",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "ctHash",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "issuer",
        type: "address",
      },
    ],
    name: "mockQueryDecrypt",
    outputs: [
      {
        internalType: "bool",
        name: "allowed",
        type: "bool",
      },
      {
        internalType: "string",
        name: "error",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "ctHash",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "address",
            name: "issuer",
            type: "address",
          },
          {
            internalType: "uint64",
            name: "expiration",
            type: "uint64",
          },
          {
            internalType: "address",
            name: "recipient",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "validatorId",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "validatorContract",
            type: "address",
          },
          {
            internalType: "bytes32",
            name: "sealingKey",
            type: "bytes32",
          },
          {
            internalType: "bytes",
            name: "issuerSignature",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "recipientSignature",
            type: "bytes",
          },
        ],
        internalType: "struct Permission",
        name: "permission",
        type: "tuple",
      },
    ],
    name: "queryDecrypt",
    outputs: [
      {
        internalType: "bool",
        name: "allowed",
        type: "bool",
      },
      {
        internalType: "string",
        name: "error",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "ctHash",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "address",
            name: "issuer",
            type: "address",
          },
          {
            internalType: "uint64",
            name: "expiration",
            type: "uint64",
          },
          {
            internalType: "address",
            name: "recipient",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "validatorId",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "validatorContract",
            type: "address",
          },
          {
            internalType: "bytes32",
            name: "sealingKey",
            type: "bytes32",
          },
          {
            internalType: "bytes",
            name: "issuerSignature",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "recipientSignature",
            type: "bytes",
          },
        ],
        internalType: "struct Permission",
        name: "permission",
        type: "tuple",
      },
    ],
    name: "querySealOutput",
    outputs: [
      {
        internalType: "bool",
        name: "allowed",
        type: "bool",
      },
      {
        internalType: "string",
        name: "error",
        type: "string",
      },
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "input",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "key",
        type: "bytes32",
      },
    ],
    name: "seal",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "taskManager",
    outputs: [
      {
        internalType: "contract TaskManager",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "hashed",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "key",
        type: "bytes32",
      },
    ],
    name: "unseal",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052348015600e575f80fd5b506118e58061001c5f395ff3fe608060405234801561000f575f80fd5b506004361061009c575f3560e01c8063a02eb53411610064578063a02eb5341461016c578063a0639f541461019e578063a50a640e146101d0578063de287359146101ee578063ff6957d31461020c5761009c565b806309ba3156146100a05780631a1992a9146100d2578063267c4ae414610102578063485cc955146101205780638a5c8c7f1461013c575b5f80fd5b6100ba60048036038101906100b591906110b3565b61023c565b6040516100c9939291906111a8565b60405180910390f35b6100ec60048036038101906100e791906111e4565b61051f565b6040516100f99190611222565b60405180910390f35b61010a61052d565b604051610117919061123b565b60405180910390f35b61013a60048036038101906101359190611254565b610535565b005b61015660048036038101906101519190611292565b6105b8565b60405161016391906112df565b60405180910390f35b610186600480360381019061018191906112f8565b6105c6565b60405161019593929190611348565b60405180910390f35b6101b860048036038101906101b391906110b3565b610855565b6040516101c793929190611348565b60405180910390f35b6101d8610ade565b6040516101e591906113df565b60405180910390f35b6101f6610b01565b6040516102039190611418565b60405180910390f35b61022660048036038101906102219190611431565b610b26565b6040516102339190611478565b60405180910390f35b5f60605f805f1b8460a001510361027f576040517fb78926d800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ae79f04a86896040518363ffffffff1660e01b81526004016102dc9291906115da565b602060405180830381865afa92505050801561031657506040513d601f19601f820116820180604052508101906103139190611632565b60015b61040257610322611669565b806308c379a0036103535750610336611688565b8061034157506103b8565b5f815f801b9450945094505050610516565b634e487b71036103b857610365611717565b9061037057506103b8565b5f805f1b6040518060400160405280600581526020017f50616e6963000000000000000000000000000000000000000000000000000000815250909450945094505050610516565b3d805f81146103e2576040519150601f19603f3d011682016040523d82523d5f602084013e6103e7565b606091505b505f6103f282610b26565b5f801b9450945094505050610516565b8091505080610452575f805f1b6040518060400160405280600a81526020017f4e6f74416c6c6f776564000000000000000000000000000000000000000000008152509093509350935050610516565b5f805f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631c76642b896040518263ffffffff1660e01b81526004016104ac91906112df565b602060405180830381865afa1580156104c7573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906104eb9190611749565b905060016104fd828860a0015161051f565b60405180602001604052805f8152509094509450945050505b93509350939050565b5f81835f1b18905092915050565b5f6001905090565b815f806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b5f8183185f1c905092915050565b5f60605f8060015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635faa299a88876040518363ffffffff1660e01b8152600401610627929190611783565b602060405180830381865afa92505050801561066157506040513d601f19601f8201168201806040525081019061065e9190611632565b60015b6107475761066d611669565b806308c379a00361069c5750610681611688565b8061068c57506106ff565b5f815f945094509450505061084c565b634e487b71036106ff576106ae611717565b906106b957506106ff565b5f806040518060400160405280600581526020017f50616e696300000000000000000000000000000000000000000000000000000081525090945094509450505061084c565b3d805f8114610729576040519150601f19603f3d011682016040523d82523d5f602084013e61072e565b606091505b505f61073982610b26565b5f945094509450505061084c565b8091505080610795575f806040518060400160405280600a81526020017f4e6f74416c6c6f77656400000000000000000000000000000000000000000000815250909350935093505061084c565b5f805f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631c76642b896040518263ffffffff1660e01b81526004016107ef91906112df565b602060405180830381865afa15801561080a573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061082e9190611749565b905060018160405180602001604052805f8152509094509450945050505b93509350939050565b5f60605f8060015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ae79f04a86896040518363ffffffff1660e01b81526004016108b69291906115da565b602060405180830381865afa9250505080156108f057506040513d601f19601f820116820180604052508101906108ed9190611632565b60015b6109d6576108fc611669565b806308c379a00361092b5750610910611688565b8061091b575061098e565b5f815f9450945094505050610ad5565b634e487b710361098e5761093d611717565b90610948575061098e565b5f806040518060400160405280600581526020017f50616e6963000000000000000000000000000000000000000000000000000000815250909450945094505050610ad5565b3d805f81146109b8576040519150601f19603f3d011682016040523d82523d5f602084013e6109bd565b606091505b505f6109c882610b26565b5f9450945094505050610ad5565b8091505080610a24575f806040518060400160405280600a81526020017f4e6f74416c6c6f776564000000000000000000000000000000000000000000008152509093509350935050610ad5565b60015f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631c76642b896040518263ffffffff1660e01b8152600401610a7e91906112df565b602060405180830381865afa158015610a99573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610abd9190611749565b60405180602001604052805f81525090935093509350505b93509350939050565b5f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60605f82610b3390611804565b905063ed0764a160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191603610bbf576040518060400160405280601981526020017f5065726d697373696f6e496e76616c69645f4578706972656400000000000000815250915050610d5d565b634c40eccb60e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191603610c2c5760405180606001604052806021815260200161188f60219139915050610d5d565b638e143bf760e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191603610c995760405180606001604052806024815260200161186b60249139915050610d5d565b63cbd3a96660e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191603610d23576040518060400160405280601a81526020017f5065726d697373696f6e496e76616c69645f44697361626c6564000000000000815250915050610d5d565b6040518060400160405280600f81526020017f4c6f77204c6576656c204572726f7200000000000000000000000000000000008152509150505b919050565b5f604051905090565b5f80fd5b5f80fd5b5f819050919050565b610d8581610d73565b8114610d8f575f80fd5b50565b5f81359050610da081610d7c565b92915050565b5f80fd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b610df082610daa565b810181811067ffffffffffffffff82111715610e0f57610e0e610dba565b5b80604052505050565b5f610e21610d62565b9050610e2d8282610de7565b919050565b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f610e5f82610e36565b9050919050565b610e6f81610e55565b8114610e79575f80fd5b50565b5f81359050610e8a81610e66565b92915050565b5f67ffffffffffffffff82169050919050565b610eac81610e90565b8114610eb6575f80fd5b50565b5f81359050610ec781610ea3565b92915050565b5f819050919050565b610edf81610ecd565b8114610ee9575f80fd5b50565b5f81359050610efa81610ed6565b92915050565b5f80fd5b5f80fd5b5f67ffffffffffffffff821115610f2257610f21610dba565b5b610f2b82610daa565b9050602081019050919050565b828183375f83830152505050565b5f610f58610f5384610f08565b610e18565b905082815260208101848484011115610f7457610f73610f04565b5b610f7f848285610f38565b509392505050565b5f82601f830112610f9b57610f9a610f00565b5b8135610fab848260208601610f46565b91505092915050565b5f6101008284031215610fca57610fc9610da6565b5b610fd5610100610e18565b90505f610fe484828501610e7c565b5f830152506020610ff784828501610eb9565b602083015250604061100b84828501610e7c565b604083015250606061101f84828501610d92565b606083015250608061103384828501610e7c565b60808301525060a061104784828501610eec565b60a08301525060c082013567ffffffffffffffff81111561106b5761106a610e32565b5b61107784828501610f87565b60c08301525060e082013567ffffffffffffffff81111561109b5761109a610e32565b5b6110a784828501610f87565b60e08301525092915050565b5f805f606084860312156110ca576110c9610d6b565b5b5f6110d786828701610d92565b93505060206110e886828701610d92565b925050604084013567ffffffffffffffff81111561110957611108610d6f565b5b61111586828701610fb4565b9150509250925092565b5f8115159050919050565b6111338161111f565b82525050565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f61116b82611139565b6111758185611143565b9350611185818560208601611153565b61118e81610daa565b840191505092915050565b6111a281610ecd565b82525050565b5f6060820190506111bb5f83018661112a565b81810360208301526111cd8185611161565b90506111dc6040830184611199565b949350505050565b5f80604083850312156111fa576111f9610d6b565b5b5f61120785828601610d92565b925050602061121885828601610eec565b9150509250929050565b5f6020820190506112355f830184611199565b92915050565b5f60208201905061124e5f83018461112a565b92915050565b5f806040838503121561126a57611269610d6b565b5b5f61127785828601610e7c565b925050602061128885828601610e7c565b9150509250929050565b5f80604083850312156112a8576112a7610d6b565b5b5f6112b585828601610eec565b92505060206112c685828601610eec565b9150509250929050565b6112d981610d73565b82525050565b5f6020820190506112f25f8301846112d0565b92915050565b5f805f6060848603121561130f5761130e610d6b565b5b5f61131c86828701610d92565b935050602061132d86828701610d92565b925050604061133e86828701610e7c565b9150509250925092565b5f60608201905061135b5f83018661112a565b818103602083015261136d8185611161565b905061137c60408301846112d0565b949350505050565b5f819050919050565b5f6113a76113a261139d84610e36565b611384565b610e36565b9050919050565b5f6113b88261138d565b9050919050565b5f6113c9826113ae565b9050919050565b6113d9816113bf565b82525050565b5f6020820190506113f25f8301846113d0565b92915050565b5f611402826113ae565b9050919050565b611412816113f8565b82525050565b5f60208201905061142b5f830184611409565b92915050565b5f6020828403121561144657611445610d6b565b5b5f82013567ffffffffffffffff81111561146357611462610d6f565b5b61146f84828501610f87565b91505092915050565b5f6020820190508181035f8301526114908184611161565b905092915050565b6114a181610e55565b82525050565b6114b081610e90565b82525050565b6114bf81610d73565b82525050565b6114ce81610ecd565b82525050565b5f81519050919050565b5f82825260208201905092915050565b5f6114f8826114d4565b61150281856114de565b9350611512818560208601611153565b61151b81610daa565b840191505092915050565b5f61010083015f83015161153c5f860182611498565b50602083015161154f60208601826114a7565b5060408301516115626040860182611498565b50606083015161157560608601826114b6565b5060808301516115886080860182611498565b5060a083015161159b60a08601826114c5565b5060c083015184820360c08601526115b382826114ee565b91505060e083015184820360e08601526115cd82826114ee565b9150508091505092915050565b5f6040820190508181035f8301526115f28185611526565b905061160160208301846112d0565b9392505050565b6116118161111f565b811461161b575f80fd5b50565b5f8151905061162c81611608565b92915050565b5f6020828403121561164757611646610d6b565b5b5f6116548482850161161e565b91505092915050565b5f8160e01c9050919050565b5f60033d11156116855760045f803e6116825f5161165d565b90505b90565b5f60443d1061171457611699610d62565b60043d036004823e80513d602482011167ffffffffffffffff821117156116c1575050611714565b808201805167ffffffffffffffff8111156116df5750505050611714565b80602083010160043d0385018111156116fc575050505050611714565b61170b82602001850186610de7565b82955050505050505b90565b5f8060233d111561173157602060045f3e600191505f5190505b9091565b5f8151905061174381610d7c565b92915050565b5f6020828403121561175e5761175d610d6b565b5b5f61176b84828501611735565b91505092915050565b61177d81610e55565b82525050565b5f6040820190506117965f8301856112d0565b6117a36020830184611774565b9392505050565b5f819050602082019050919050565b5f7fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b5f6117ef82516117b9565b80915050919050565b5f82821b905092915050565b5f61180e826114d4565b82611818846117aa565b9050611823816117e4565b925060048210156118635761185e7fffffffff00000000000000000000000000000000000000000000000000000000836004036008026117f8565b831692505b505091905056fe5065726d697373696f6e496e76616c69645f526563697069656e745369676e61747572655065726d697373696f6e496e76616c69645f4973737565725369676e6174757265a264697066735822122062dc714aae0b0c1200dc00930911dc13719e4827c464f2f5b4a20f7475b979a564736f6c63430008190033";

type MockQueryDecrypterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockQueryDecrypterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockQueryDecrypter__factory extends ContractFactory {
  constructor(...args: MockQueryDecrypterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      MockQueryDecrypter & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): MockQueryDecrypter__factory {
    return super.connect(runner) as MockQueryDecrypter__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockQueryDecrypterInterface {
    return new Interface(_abi) as MockQueryDecrypterInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): MockQueryDecrypter {
    return new Contract(address, _abi, runner) as unknown as MockQueryDecrypter;
  }
}
