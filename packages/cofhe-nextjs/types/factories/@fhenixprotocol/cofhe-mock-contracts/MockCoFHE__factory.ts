/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  MockCoFHE,
  MockCoFHEInterface,
} from "../../../@fhenixprotocol/cofhe-mock-contracts/MockCoFHE";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "ctHash",
        type: "uint256",
      },
    ],
    name: "InputNotInMockStorage",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "operation",
        type: "string",
      },
    ],
    name: "InvalidThreeInputOperation",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "operation",
        type: "string",
      },
    ],
    name: "InvalidTwoInputOperation",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "operation",
        type: "string",
      },
    ],
    name: "InvalidUnaryOperation",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "length",
        type: "uint256",
      },
    ],
    name: "StringsInsufficientHexLength",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "operation",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "ctHash",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "MOCK_logAllow",
    outputs: [],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "ctHash",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "MOCK_setInEuintKey",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "inMockStorage",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "logOps",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "mockStorage",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "str",
        type: "string",
      },
    ],
    name: "removeFirstLetter",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "_logOps",
        type: "bool",
      },
    ],
    name: "setLogOps",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "str",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "start",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "length",
        type: "uint256",
      },
    ],
    name: "sliceString",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

export class MockCoFHE__factory {
  static readonly abi = _abi;
  static createInterface(): MockCoFHEInterface {
    return new Interface(_abi) as MockCoFHEInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): MockCoFHE {
    return new Contract(address, _abi, runner) as unknown as MockCoFHE;
  }
}
