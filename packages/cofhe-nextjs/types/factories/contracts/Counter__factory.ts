/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../common";
import type { Counter, CounterInterface } from "../../contracts/Counter";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "got",
        type: "uint8",
      },
      {
        internalType: "uint8",
        name: "expected",
        type: "uint8",
      },
    ],
    name: "InvalidEncryptedInput",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "int32",
        name: "value",
        type: "int32",
      },
    ],
    name: "SecurityZoneOutOfBounds",
    type: "error",
  },
  {
    inputs: [],
    name: "ONE",
    outputs: [
      {
        internalType: "euint32",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "count",
    outputs: [
      {
        internalType: "euint32",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decrement",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "decryptCounter",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getDecryptedValue",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "increment",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "isInitialized",
    outputs: [
      {
        internalType: "ebool",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "ctHash",
            type: "uint256",
          },
          {
            internalType: "uint8",
            name: "securityZone",
            type: "uint8",
          },
          {
            internalType: "uint8",
            name: "utype",
            type: "uint8",
          },
          {
            internalType: "bytes",
            name: "signature",
            type: "bytes",
          },
        ],
        internalType: "struct InEuint32",
        name: "value",
        type: "tuple",
      },
    ],
    name: "reset",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561000f575f80fd5b5061002060016100af60201b60201c565b6001819055506100355f6100af60201b60201c565b5f819055506100495f6100c760201b60201c565b60028190555061005f60016100c760201b60201c565b6002819055506100755f546100df60201b60201c565b6100866001546100df60201b60201c565b6100995f5460015461015e60201b60201c565b506100aa5f546101c560201b60201c565b61095a565b5f6100c0825f61024460201b60201c565b9050919050565b5f6100d8825f61026460201b60201c565b9050919050565b73ea30c4b8b44078bbf8a6ef5b9f1ec1626c7848d973ffffffffffffffffffffffffffffffffffffffff166365d0509c82306040518363ffffffff1660e01b815260040161012e9291906106b6565b5f604051808303815f87803b158015610145575f80fd5b505af1158015610157573d5f803e3d5ffd5b5050505050565b5f61016e8361029360201b60201c565b610184576101815f6100af60201b60201c565b92505b6101938261029360201b60201c565b6101a9576101a65f6100af60201b60201c565b91505b6101bd6004848460126102aa60201b60201c565b905092915050565b73ea30c4b8b44078bbf8a6ef5b9f1ec1626c7848d973ffffffffffffffffffffffffffffffffffffffff166365d0509c82336040518363ffffffff1660e01b81526004016102149291906106b6565b5f604051808303815f87803b15801561022b575f80fd5b505af115801561023d573d5f803e3d5ffd5b5050505050565b5f806102588460048561039f60201b60201c565b90508091505092915050565b5f805f9050831561027457600190505b5f610286825f8661039f60201b60201c565b9050809250505092915050565b5f6102a3826104a660201b60201c565b9050919050565b5f73ea30c4b8b44078bbf8a6ef5b9f1ec1626c7848d973ffffffffffffffffffffffffffffffffffffffff16631888debd86846102ed88886104b260201b60201c565b5f67ffffffffffffffff811115610307576103066106dd565b5b6040519080825280602002602001820160405280156103355781602001602082028036833780820191505090505b506040518563ffffffff1660e01b8152600401610355949392919061084f565b6020604051808303815f875af1158015610371573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061039591906108ce565b9050949350505050565b5f73ea30c4b8b44078bbf8a6ef5b9f1ec1626c7848d973ffffffffffffffffffffffffffffffffffffffff16631888debd84601a5f67ffffffffffffffff8111156103ed576103ec6106dd565b5b60405190808252806020026020018201604052801561041b5781602001602082028036833780820191505090505b5061043e898960ff166104338a61054c60201b60201c565b6105a360201b60201c565b6040518563ffffffff1660e01b815260040161045d949392919061084f565b6020604051808303815f875af1158015610479573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061049d91906108ce565b90509392505050565b5f808214159050919050565b60605f600267ffffffffffffffff8111156104d0576104cf6106dd565b5b6040519080825280602002602001820160405280156104fe5781602001602082028036833780820191505090505b50905083815f81518110610515576105146108f9565b5b6020026020010181815250508281600181518110610536576105356108f9565b5b6020026020010181815250508091505092915050565b5f808260030b121561059557816040517f8f568bf800000000000000000000000000000000000000000000000000000000815260040161058c9190610941565b60405180910390fd5b8163ffffffff169050919050565b60605f600367ffffffffffffffff8111156105c1576105c06106dd565b5b6040519080825280602002602001820160405280156105ef5781602001602082028036833780820191505090505b50905084815f81518110610606576106056108f9565b5b6020026020010181815250508381600181518110610627576106266108f9565b5b6020026020010181815250508281600281518110610648576106476108f9565b5b602002602001018181525050809150509392505050565b5f819050919050565b6106718161065f565b82525050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6106a082610677565b9050919050565b6106b081610696565b82525050565b5f6040820190506106c95f830185610668565b6106d660208301846106a7565b9392505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b5f60ff82169050919050565b61071f8161070a565b82525050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602160045260245ffd5b6020811061076357610762610725565b5b50565b5f81905061077382610752565b919050565b5f61078282610766565b9050919050565b61079281610778565b82525050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b6107ca8161065f565b82525050565b5f6107db83836107c1565b60208301905092915050565b5f602082019050919050565b5f6107fd82610798565b61080781856107a2565b9350610812836107b2565b805f5b8381101561084257815161082988826107d0565b9750610834836107e7565b925050600181019050610815565b5085935050505092915050565b5f6080820190506108625f830187610716565b61086f6020830186610789565b818103604083015261088181856107f3565b9050818103606083015261089581846107f3565b905095945050505050565b5f80fd5b6108ad8161065f565b81146108b7575f80fd5b50565b5f815190506108c8816108a4565b92915050565b5f602082840312156108e3576108e26108a0565b5b5f6108f0848285016108ba565b91505092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b5f8160030b9050919050565b61093b81610926565b82525050565b5f6020820190506109545f830184610932565b92915050565b611280806109675f395ff3fe608060405234801561000f575f80fd5b5060043610610086575f3560e01c806364f530361161005957806364f53036146100ee578063a9c5936f1461010a578063c2ee3a0814610114578063d09de08a1461013257610086565b806306661abd1461008a5780632baeceb7146100a8578063392e53cd146100b257806356265042146100d0575b5f80fd5b61009261013c565b60405161009f9190610ab5565b60405180910390f35b6100b0610141565b005b6100ba610169565b6040516100c79190610add565b60405180910390f35b6100d861016f565b6040516100e59190610b05565b60405180910390f35b61010860048036038101906101039190610d64565b6101ce565b005b6101126101f3565b005b61011c6101ff565b6040516101299190610ab5565b60405180910390f35b61013a610205565b005b5f5481565b61014e5f5460015461022d565b5f8190555061015d5f54610276565b6101675f546102f5565b565b60025481565b5f805f61017c5f54610374565b915063ffffffff169150806101c6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101bd90610e05565b60405180910390fd5b819250505090565b6101d781610392565b5f819055506101e65f54610276565b6101f05f546102f5565b50565b6101fd5f54610405565b565b60015481565b6102125f5460015461042b565b5f819055506102215f54610276565b61022b5f546102f5565b565b5f61023783610474565b610247576102445f610485565b92505b61025082610474565b6102605761025d5f610485565b91505b61026e600484846007610497565b905092915050565b73ea30c4b8b44078bbf8a6ef5b9f1ec1626c7848d973ffffffffffffffffffffffffffffffffffffffff166365d0509c82306040518363ffffffff1660e01b81526004016102c5929190610e62565b5f604051808303815f87803b1580156102dc575f80fd5b505af11580156102ee573d5f803e3d5ffd5b5050505050565b73ea30c4b8b44078bbf8a6ef5b9f1ec1626c7848d973ffffffffffffffffffffffffffffffffffffffff166365d0509c82336040518363ffffffff1660e01b8152600401610344929190610e62565b5f604051808303815f87803b15801561035b575f80fd5b505af115801561036d573d5f803e3d5ffd5b5050505050565b5f805f8061038185610586565b915091508181935093505050915091565b5f80600490508060ff16836040015160ff16146103ec578260400151816040517f67cf30710000000000000000000000000000000000000000000000000000000081526004016103e3929190610e98565b60405180910390fd5b6103fd6103f88461061c565b61065e565b915050919050565b61040e81610474565b61041e5761041b5f610485565b90505b610427816106f5565b5050565b5f61043583610474565b610445576104425f610485565b92505b61044e82610474565b61045e5761045b5f610485565b91505b61046c600484846008610497565b905092915050565b5f61047e8261077a565b9050919050565b5f610490825f610786565b9050919050565b5f73ea30c4b8b44078bbf8a6ef5b9f1ec1626c7848d973ffffffffffffffffffffffffffffffffffffffff16631888debd86846104d488886107a0565b5f67ffffffffffffffff8111156104ee576104ed610b43565b5b60405190808252806020026020018201604052801561051c5781602001602082028036833780820191505090505b506040518563ffffffff1660e01b815260040161053c9493929190610fe9565b6020604051808303815f875af1158015610558573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061057c919061104e565b9050949350505050565b5f8073ea30c4b8b44078bbf8a6ef5b9f1ec1626c7848d973ffffffffffffffffffffffffffffffffffffffff1663458693c9846040518263ffffffff1660e01b81526004016105d59190610b05565b6040805180830381865afa1580156105ef573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061061391906110ae565b91509150915091565b610624610a48565b6040518060800160405280835f01518152602001836020015160ff168152602001600460ff16815260200183606001518152509050919050565b5f73ea30c4b8b44078bbf8a6ef5b9f1ec1626c7848d973ffffffffffffffffffffffffffffffffffffffff166327f9c76283336040518363ffffffff1660e01b81526004016106ae9291906111bb565b6020604051808303815f875af11580156106ca573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906106ee919061104e565b9050919050565b5f73ea30c4b8b44078bbf8a6ef5b9f1ec1626c7848d973ffffffffffffffffffffffffffffffffffffffff16630828982783336040518363ffffffff1660e01b8152600401610745929190610e62565b5f604051808303815f87803b15801561075c575f80fd5b505af115801561076e573d5f803e3d5ffd5b50505050819050919050565b5f808214159050919050565b5f806107948460048561083a565b90508091505092915050565b60605f600267ffffffffffffffff8111156107be576107bd610b43565b5b6040519080825280602002602001820160405280156107ec5781602001602082028036833780820191505090505b50905083815f81518110610803576108026111e9565b5b6020026020010181815250508281600181518110610824576108236111e9565b5b6020026020010181815250508091505092915050565b5f73ea30c4b8b44078bbf8a6ef5b9f1ec1626c7848d973ffffffffffffffffffffffffffffffffffffffff16631888debd84601a5f67ffffffffffffffff81111561088857610887610b43565b5b6040519080825280602002602001820160405280156108b65781602001602082028036833780820191505090505b506108cd898960ff166108c88a610935565b61098c565b6040518563ffffffff1660e01b81526004016108ec9493929190610fe9565b6020604051808303815f875af1158015610908573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061092c919061104e565b90509392505050565b5f808260030b121561097e57816040517f8f568bf80000000000000000000000000000000000000000000000000000000081526004016109759190611231565b60405180910390fd5b8163ffffffff169050919050565b60605f600367ffffffffffffffff8111156109aa576109a9610b43565b5b6040519080825280602002602001820160405280156109d85781602001602082028036833780820191505090505b50905084815f815181106109ef576109ee6111e9565b5b6020026020010181815250508381600181518110610a1057610a0f6111e9565b5b6020026020010181815250508281600281518110610a3157610a306111e9565b5b602002602001018181525050809150509392505050565b60405180608001604052805f81526020015f60ff1681526020015f60ff168152602001606081525090565b5f819050919050565b5f819050919050565b5f610a9f610a9a610a9584610a73565b610a7c565b610a73565b9050919050565b610aaf81610a85565b82525050565b5f602082019050610ac85f830184610aa6565b92915050565b610ad781610a85565b82525050565b5f602082019050610af05f830184610ace565b92915050565b610aff81610a73565b82525050565b5f602082019050610b185f830184610af6565b92915050565b5f604051905090565b5f80fd5b5f80fd5b5f80fd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b610b7982610b33565b810181811067ffffffffffffffff82111715610b9857610b97610b43565b5b80604052505050565b5f610baa610b1e565b9050610bb68282610b70565b919050565b5f80fd5b610bc881610a73565b8114610bd2575f80fd5b50565b5f81359050610be381610bbf565b92915050565b5f60ff82169050919050565b610bfe81610be9565b8114610c08575f80fd5b50565b5f81359050610c1981610bf5565b92915050565b5f80fd5b5f80fd5b5f67ffffffffffffffff821115610c4157610c40610b43565b5b610c4a82610b33565b9050602081019050919050565b828183375f83830152505050565b5f610c77610c7284610c27565b610ba1565b905082815260208101848484011115610c9357610c92610c23565b5b610c9e848285610c57565b509392505050565b5f82601f830112610cba57610cb9610c1f565b5b8135610cca848260208601610c65565b91505092915050565b5f60808284031215610ce857610ce7610b2f565b5b610cf26080610ba1565b90505f610d0184828501610bd5565b5f830152506020610d1484828501610c0b565b6020830152506040610d2884828501610c0b565b604083015250606082013567ffffffffffffffff811115610d4c57610d4b610bbb565b5b610d5884828501610ca6565b60608301525092915050565b5f60208284031215610d7957610d78610b27565b5b5f82013567ffffffffffffffff811115610d9657610d95610b2b565b5b610da284828501610cd3565b91505092915050565b5f82825260208201905092915050565b7f56616c7565206973206e6f7420726561647900000000000000000000000000005f82015250565b5f610def601283610dab565b9150610dfa82610dbb565b602082019050919050565b5f6020820190508181035f830152610e1c81610de3565b9050919050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f610e4c82610e23565b9050919050565b610e5c81610e42565b82525050565b5f604082019050610e755f830185610af6565b610e826020830184610e53565b9392505050565b610e9281610be9565b82525050565b5f604082019050610eab5f830185610e89565b610eb86020830184610e89565b9392505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602160045260245ffd5b60208110610efd57610efc610ebf565b5b50565b5f819050610f0d82610eec565b919050565b5f610f1c82610f00565b9050919050565b610f2c81610f12565b82525050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b610f6481610a73565b82525050565b5f610f758383610f5b565b60208301905092915050565b5f602082019050919050565b5f610f9782610f32565b610fa18185610f3c565b9350610fac83610f4c565b805f5b83811015610fdc578151610fc38882610f6a565b9750610fce83610f81565b925050600181019050610faf565b5085935050505092915050565b5f608082019050610ffc5f830187610e89565b6110096020830186610f23565b818103604083015261101b8185610f8d565b9050818103606083015261102f8184610f8d565b905095945050505050565b5f8151905061104881610bbf565b92915050565b5f6020828403121561106357611062610b27565b5b5f6110708482850161103a565b91505092915050565b5f8115159050919050565b61108d81611079565b8114611097575f80fd5b50565b5f815190506110a881611084565b92915050565b5f80604083850312156110c4576110c3610b27565b5b5f6110d18582860161103a565b92505060206110e28582860161109a565b9150509250929050565b6110f581610be9565b82525050565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f61112d826110fb565b6111378185611105565b9350611147818560208601611115565b61115081610b33565b840191505092915050565b5f608083015f8301516111705f860182610f5b565b50602083015161118360208601826110ec565b50604083015161119660408601826110ec565b50606083015184820360608601526111ae8282611123565b9150508091505092915050565b5f6040820190508181035f8301526111d3818561115b565b90506111e26020830184610e53565b9392505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b5f8160030b9050919050565b61122b81611216565b82525050565b5f6020820190506112445f830184611222565b9291505056fea2646970667358221220190461d9047156b42ca0a00ef407e3b018ac8e7f243cf6c3ddc1ec8d89689c4364736f6c63430008190033";

type CounterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CounterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Counter__factory extends ContractFactory {
  constructor(...args: CounterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      Counter & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): Counter__factory {
    return super.connect(runner) as Counter__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CounterInterface {
    return new Interface(_abi) as CounterInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): Counter {
    return new Contract(address, _abi, runner) as unknown as Counter;
  }
}
