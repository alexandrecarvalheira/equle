/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export type InEuint128Struct = {
  ctHash: BigNumberish;
  securityZone: BigNumberish;
  utype: BigNumberish;
  signature: BytesLike;
};

export type InEuint128StructOutput = [
  ctHash: bigint,
  securityZone: bigint,
  utype: bigint,
  signature: string
] & { ctHash: bigint; securityZone: bigint; utype: bigint; signature: string };

export type InEuint16Struct = {
  ctHash: BigNumberish;
  securityZone: BigNumberish;
  utype: BigNumberish;
  signature: BytesLike;
};

export type InEuint16StructOutput = [
  ctHash: bigint,
  securityZone: bigint,
  utype: bigint,
  signature: string
] & { ctHash: bigint; securityZone: bigint; utype: bigint; signature: string };

export interface EquleInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DAY"
      | "MAX_ATTEMPTS"
      | "ONE"
      | "TWO"
      | "ZERO"
      | "finalizeGame"
      | "gameEquation"
      | "gameResult"
      | "getCurrentGameId"
      | "getDecryptedfinalizedEquation"
      | "getPlayerAttempt"
      | "getPlayerAttempts"
      | "getPlayerEquationXor"
      | "getPlayerGameState"
      | "getPlayerLastEquationGuess"
      | "getPlayerLastResultGuess"
      | "guess"
      | "hasPlayerWon"
      | "owner"
      | "renounceOwnership"
      | "setGame"
      | "startTimestamp"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "GameCompleted"
      | "GameFinalized"
      | "GuessSubmitted"
      | "OwnershipTransferred"
  ): EventFragment;

  encodeFunctionData(functionFragment: "DAY", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "MAX_ATTEMPTS",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "ONE", values?: undefined): string;
  encodeFunctionData(functionFragment: "TWO", values?: undefined): string;
  encodeFunctionData(functionFragment: "ZERO", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "finalizeGame",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "gameEquation",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "gameResult",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentGameId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDecryptedfinalizedEquation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPlayerAttempt",
    values: [BigNumberish, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPlayerAttempts",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPlayerEquationXor",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPlayerGameState",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPlayerLastEquationGuess",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPlayerLastResultGuess",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "guess",
    values: [InEuint128Struct, InEuint16Struct]
  ): string;
  encodeFunctionData(
    functionFragment: "hasPlayerWon",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setGame",
    values: [BigNumberish, InEuint128Struct, InEuint16Struct]
  ): string;
  encodeFunctionData(
    functionFragment: "startTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "DAY", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "MAX_ATTEMPTS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ONE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "TWO", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ZERO", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "finalizeGame",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "gameEquation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gameResult", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentGameId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDecryptedfinalizedEquation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPlayerAttempt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPlayerAttempts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPlayerEquationXor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPlayerGameState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPlayerLastEquationGuess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPlayerLastResultGuess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "guess", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hasPlayerWon",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setGame", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "startTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace GameCompletedEvent {
  export type InputTuple = [
    player: AddressLike,
    gameId: BigNumberish,
    won: boolean,
    totalAttempts: BigNumberish
  ];
  export type OutputTuple = [
    player: string,
    gameId: bigint,
    won: boolean,
    totalAttempts: bigint
  ];
  export interface OutputObject {
    player: string;
    gameId: bigint;
    won: boolean;
    totalAttempts: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GameFinalizedEvent {
  export type InputTuple = [
    player: AddressLike,
    gameId: BigNumberish,
    attemptNumber: BigNumberish
  ];
  export type OutputTuple = [
    player: string,
    gameId: bigint,
    attemptNumber: bigint
  ];
  export interface OutputObject {
    player: string;
    gameId: bigint;
    attemptNumber: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GuessSubmittedEvent {
  export type InputTuple = [
    player: AddressLike,
    gameId: BigNumberish,
    attemptNumber: BigNumberish,
    lastEquationXor: BigNumberish,
    resultFeedback: BigNumberish
  ];
  export type OutputTuple = [
    player: string,
    gameId: bigint,
    attemptNumber: bigint,
    lastEquationXor: bigint,
    resultFeedback: bigint
  ];
  export interface OutputObject {
    player: string;
    gameId: bigint;
    attemptNumber: bigint;
    lastEquationXor: bigint;
    resultFeedback: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Equle extends BaseContract {
  connect(runner?: ContractRunner | null): Equle;
  waitForDeployment(): Promise<this>;

  interface: EquleInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DAY: TypedContractMethod<[], [bigint], "view">;

  MAX_ATTEMPTS: TypedContractMethod<[], [bigint], "view">;

  ONE: TypedContractMethod<[], [bigint], "view">;

  TWO: TypedContractMethod<[], [bigint], "view">;

  ZERO: TypedContractMethod<[], [bigint], "view">;

  finalizeGame: TypedContractMethod<[], [void], "nonpayable">;

  gameEquation: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  gameResult: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  getCurrentGameId: TypedContractMethod<[], [bigint], "view">;

  getDecryptedfinalizedEquation: TypedContractMethod<[], [void], "nonpayable">;

  getPlayerAttempt: TypedContractMethod<
    [gameId: BigNumberish, player: AddressLike, attemptNumber: BigNumberish],
    [
      [bigint, bigint, bigint, bigint] & {
        equationGuess: bigint;
        resultGuess: bigint;
        equationXor: bigint;
        resultFeedback: bigint;
      }
    ],
    "view"
  >;

  getPlayerAttempts: TypedContractMethod<
    [gameId: BigNumberish, player: AddressLike],
    [bigint],
    "view"
  >;

  getPlayerEquationXor: TypedContractMethod<
    [gameId: BigNumberish, player: AddressLike],
    [bigint],
    "view"
  >;

  getPlayerGameState: TypedContractMethod<
    [gameId: BigNumberish, player: AddressLike],
    [[bigint, boolean] & { currentAttempt: bigint; hasWon: boolean }],
    "view"
  >;

  getPlayerLastEquationGuess: TypedContractMethod<
    [gameId: BigNumberish, player: AddressLike],
    [bigint],
    "view"
  >;

  getPlayerLastResultGuess: TypedContractMethod<
    [gameId: BigNumberish, player: AddressLike],
    [bigint],
    "view"
  >;

  guess: TypedContractMethod<
    [equationGuess: InEuint128Struct, resultGuess: InEuint16Struct],
    [void],
    "nonpayable"
  >;

  hasPlayerWon: TypedContractMethod<
    [gameId: BigNumberish, player: AddressLike],
    [boolean],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setGame: TypedContractMethod<
    [gameId: BigNumberish, equation: InEuint128Struct, result: InEuint16Struct],
    [void],
    "nonpayable"
  >;

  startTimestamp: TypedContractMethod<[], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DAY"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_ATTEMPTS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "ONE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "TWO"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "ZERO"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "finalizeGame"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "gameEquation"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "gameResult"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getCurrentGameId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getDecryptedfinalizedEquation"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getPlayerAttempt"
  ): TypedContractMethod<
    [gameId: BigNumberish, player: AddressLike, attemptNumber: BigNumberish],
    [
      [bigint, bigint, bigint, bigint] & {
        equationGuess: bigint;
        resultGuess: bigint;
        equationXor: bigint;
        resultFeedback: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPlayerAttempts"
  ): TypedContractMethod<
    [gameId: BigNumberish, player: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPlayerEquationXor"
  ): TypedContractMethod<
    [gameId: BigNumberish, player: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPlayerGameState"
  ): TypedContractMethod<
    [gameId: BigNumberish, player: AddressLike],
    [[bigint, boolean] & { currentAttempt: bigint; hasWon: boolean }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPlayerLastEquationGuess"
  ): TypedContractMethod<
    [gameId: BigNumberish, player: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPlayerLastResultGuess"
  ): TypedContractMethod<
    [gameId: BigNumberish, player: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "guess"
  ): TypedContractMethod<
    [equationGuess: InEuint128Struct, resultGuess: InEuint16Struct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasPlayerWon"
  ): TypedContractMethod<
    [gameId: BigNumberish, player: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setGame"
  ): TypedContractMethod<
    [gameId: BigNumberish, equation: InEuint128Struct, result: InEuint16Struct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "startTimestamp"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "GameCompleted"
  ): TypedContractEvent<
    GameCompletedEvent.InputTuple,
    GameCompletedEvent.OutputTuple,
    GameCompletedEvent.OutputObject
  >;
  getEvent(
    key: "GameFinalized"
  ): TypedContractEvent<
    GameFinalizedEvent.InputTuple,
    GameFinalizedEvent.OutputTuple,
    GameFinalizedEvent.OutputObject
  >;
  getEvent(
    key: "GuessSubmitted"
  ): TypedContractEvent<
    GuessSubmittedEvent.InputTuple,
    GuessSubmittedEvent.OutputTuple,
    GuessSubmittedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "GameCompleted(address,uint256,bool,uint8)": TypedContractEvent<
      GameCompletedEvent.InputTuple,
      GameCompletedEvent.OutputTuple,
      GameCompletedEvent.OutputObject
    >;
    GameCompleted: TypedContractEvent<
      GameCompletedEvent.InputTuple,
      GameCompletedEvent.OutputTuple,
      GameCompletedEvent.OutputObject
    >;

    "GameFinalized(address,uint256,uint8)": TypedContractEvent<
      GameFinalizedEvent.InputTuple,
      GameFinalizedEvent.OutputTuple,
      GameFinalizedEvent.OutputObject
    >;
    GameFinalized: TypedContractEvent<
      GameFinalizedEvent.InputTuple,
      GameFinalizedEvent.OutputTuple,
      GameFinalizedEvent.OutputObject
    >;

    "GuessSubmitted(address,uint256,uint8,uint256,uint256)": TypedContractEvent<
      GuessSubmittedEvent.InputTuple,
      GuessSubmittedEvent.OutputTuple,
      GuessSubmittedEvent.OutputObject
    >;
    GuessSubmitted: TypedContractEvent<
      GuessSubmittedEvent.InputTuple,
      GuessSubmittedEvent.OutputTuple,
      GuessSubmittedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
