/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../common";

export type InEuint8Struct = {
  ctHash: BigNumberish;
  securityZone: BigNumberish;
  utype: BigNumberish;
  signature: BytesLike;
};

export type InEuint8StructOutput = [
  ctHash: bigint,
  securityZone: bigint,
  utype: bigint,
  signature: string
] & { ctHash: bigint; securityZone: bigint; utype: bigint; signature: string };

export type InEuint16Struct = {
  ctHash: BigNumberish;
  securityZone: BigNumberish;
  utype: BigNumberish;
  signature: BytesLike;
};

export type InEuint16StructOutput = [
  ctHash: bigint,
  securityZone: bigint,
  utype: bigint,
  signature: string
] & { ctHash: bigint; securityZone: bigint; utype: bigint; signature: string };

export interface EqualeInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DAY"
      | "ONE"
      | "PlayerGuess"
      | "PlayerWon"
      | "TWO"
      | "ZERO"
      | "gameEquation"
      | "gameResult"
      | "getCurrentGameId"
      | "guess"
      | "playerScore"
      | "startTimestamp"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "DAY", values?: undefined): string;
  encodeFunctionData(functionFragment: "ONE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "PlayerGuess",
    values: [BigNumberish, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "PlayerWon",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "TWO", values?: undefined): string;
  encodeFunctionData(functionFragment: "ZERO", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "gameEquation",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "gameResult",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentGameId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "guess",
    values: [
      [
        InEuint8Struct,
        InEuint8Struct,
        InEuint8Struct,
        InEuint8Struct,
        InEuint8Struct
      ],
      InEuint16Struct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "playerScore",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "startTimestamp",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "DAY", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ONE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "PlayerGuess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "PlayerWon", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "TWO", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ZERO", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "gameEquation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gameResult", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentGameId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "guess", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "playerScore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startTimestamp",
    data: BytesLike
  ): Result;
}

export interface Equale extends BaseContract {
  connect(runner?: ContractRunner | null): Equale;
  waitForDeployment(): Promise<this>;

  interface: EqualeInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DAY: TypedContractMethod<[], [bigint], "view">;

  ONE: TypedContractMethod<[], [bigint], "view">;

  PlayerGuess: TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike, arg2: BigNumberish],
    [bigint],
    "view"
  >;

  PlayerWon: TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [boolean],
    "view"
  >;

  TWO: TypedContractMethod<[], [bigint], "view">;

  ZERO: TypedContractMethod<[], [bigint], "view">;

  gameEquation: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  gameResult: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  getCurrentGameId: TypedContractMethod<[], [bigint], "view">;

  guess: TypedContractMethod<
    [
      equationGuess: [
        InEuint8Struct,
        InEuint8Struct,
        InEuint8Struct,
        InEuint8Struct,
        InEuint8Struct
      ],
      resultGuess: InEuint16Struct
    ],
    [
      [[bigint, bigint, bigint, bigint, bigint], bigint] & {
        EqAnswer: [bigint, bigint, bigint, bigint, bigint];
        resultAnswer: bigint;
      }
    ],
    "nonpayable"
  >;

  playerScore: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  startTimestamp: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DAY"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "ONE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "PlayerGuess"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike, arg2: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "PlayerWon"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "TWO"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "ZERO"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "gameEquation"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "gameResult"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getCurrentGameId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "guess"
  ): TypedContractMethod<
    [
      equationGuess: [
        InEuint8Struct,
        InEuint8Struct,
        InEuint8Struct,
        InEuint8Struct,
        InEuint8Struct
      ],
      resultGuess: InEuint16Struct
    ],
    [
      [[bigint, bigint, bigint, bigint, bigint], bigint] & {
        EqAnswer: [bigint, bigint, bigint, bigint, bigint];
        resultAnswer: bigint;
      }
    ],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "playerScore"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "startTimestamp"
  ): TypedContractMethod<[], [bigint], "view">;

  filters: {};
}
